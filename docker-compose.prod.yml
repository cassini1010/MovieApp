services:
  traefik:
    image: traefik:v3.5
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    labels:
      - traefik.enable=true
      - traefik.docker.network=movie_network
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.routers.dashboard.service=api@internal"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - movie_network
  db:
    image: postgres:alpine
    restart: always
    shm_size: 128mb
    ports:
      - 5432:5432
    depends_on:
      - traefik
    networks:
      - movie_network
    env_file:
      - .env
    volumes:
      - db:/var/lib/postgresql/data

  adminer:
    image: adminer:5-standalone
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=movie_network
      - "traefik.http.routers.adminer.rule=Host(`adminer.localhost`)"
    depends_on:
      - traefik
      - db
    networks:
      - movie_network

  backend:
    build: ./backend
    depends_on:
      - traefik
      - db
      - adminer
    labels:
      - traefik.enable=true
      - traefik.docker.network=movie_network
      - "traefik.http.routers.backend.rule=Host(`backend.localhost`)"
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
    volumes:
      - ./static:/app/static
    networks:
      - movie_network
  frontend:
    build: ./frontend
    depends_on:
      - backend
    networks:
      - movie_network
    labels:
      - traefik.enable=true
      - traefik.docker.network=movie_network
      - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
    volumes:
      - ./frontend:/app
    command: npm run serve

volumes:
  db:
  
networks:
  movie_network:
    driver: bridge
