services:
  traefik:
    image: traefik:v3.5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "./traefik/acme.json:/letsencrypt/acme.json"
    command:
      # EntryPoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # Redirection
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"


      # Providers 
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"

      # API & Dashboard 
      - "--api.dashboard=true"
      - "--api.insecure=false"

      # Observability 
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"

      # SSL Enable
      - "--entrypoints.websecure.http.tls=true"

      - "--certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json" # Path inside container volume
      # - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.dnschallenge.provider=route53" # Needs provider setup
      - "--certificatesresolvers.le.acme.dnschallenge.resolvers=8.8.8.8:53,1.1.1.1:53"

      # (optional) use staging server first to avoid rate limits
      # - "--certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # Optionally make 'le' the default resolver for TLS-enabled routers
      # - "--entrypoints.websecure.http.tls.certificatesresolvers=le"

    labels:
      # Enable self‑routing
      - "traefik.enable=true"

      # Dashboard router
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=le"
    
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - DOMAIN=${DOMAIN}
    networks:
      - movie_network
  db:
    image: postgres:alpine
    restart: always
    # set shared memory limit when using docker \
    shm_size: 128mb
    ports:
      - 5432:5432
    depends_on:
      - traefik
    networks:
      - movie_network
    env_file:
      - .env
    # environment:
    #   - POSTGRES_USER=${DB_USER}
    #   - POSTGRES_PASSWORD=${DB_USER_PASSWORD}
    volumes:
      - db:/var/lib/postgresql/data

  adminer:
    image: adminer:5-standalone
    restart: always
    # ports:
    #   - 8081:8080
    labels:
      - traefik.enable=true
      - traefik.docker.network=movie_network
      - "traefik.http.routers.adminer.rule=Host(`adminer.${DOMAIN}`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.routers.adminer.tls.certresolver=le"
    depends_on:
      - traefik
      - db
    networks:
      - movie_network

  backend:
    # Build the image from the Dockerfile in the current directory
    build: ./backend

    # Host the FastAPI application on port 8000
    # ports:
    #   - "8000:8000"
    depends_on:
      - traefik
      - db
      - adminer
    labels:
      - traefik.enable=true
      - traefik.docker.network=movie_network
      - "traefik.http.routers.backend.rule=Host(`backend.${DOMAIN}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=le"
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
    volumes:
      - ./static:/app/static
    networks:
      - movie_network
    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: ./backend
          target: /app
          # Exclude the project virtual environment — it could be for a
          # different platform in the container
          ignore:
            - ./backend/.venv

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./backend/uv.lock

        - action: rebuild
          path: ./backend/Dockerfile
  frontend:
    build: ./frontend
    depends_on:
      - backend
    ports:
      - "8081:80"
    networks:
      - movie_network
    labels:
      - traefik.enable=true
      - traefik.docker.network=movie_network
      - "traefik.http.routers.frontend.rule=Host(`frontend.${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=le"
    volumes:
      - ./frontend:/app
      # - node_modules:/app/node_modules
volumes:
  db:
  # node_modules:

networks:
  movie_network:
    # Allow setting it to false for testing
    driver: bridge
